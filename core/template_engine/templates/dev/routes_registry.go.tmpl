// Code generated by conduit at {{ .Timestamp.Format "2006-01-02 15:04:05" }}. DO NOT EDIT.
// Auto-aggregates all generated route handlers

package {{ .PackageName }}

import (
	"net/http"

{{ range .Routes -}}
	{{ .PackageAlias }} "{{ .ImportPath }}"
{{ end }}
)

// GetConfiguredRouter returns a fully configured HTTP router with all routes
func GetConfiguredRouter() *http.ServeMux {
	mux := http.NewServeMux()
	RegisterRoutes(mux)
	return mux
}

// RegisterRoutes registers all routes with the provided mux
func RegisterRoutes(mux *http.ServeMux) {
{{ range .Routes -}}
	// Register routes for {{ .FolderPath }}
{{ $route := . -}}
{{ range .Methods -}}
	if handler := {{ $route.PackageAlias }}.Get{{ . }}Handler(); handler != nil {
		mux.HandleFunc("{{ . }} {{ $route.APIPath }}", handler)
	}
{{ end }}
{{ end }}
}

// GetAllRoutes returns metadata about all registered routes
func GetAllRoutes() []RouteInfo {
	return []RouteInfo{
{{ range .Routes -}}
		{
			APIPath:    "{{ .APIPath }}",
			FolderPath: "{{ .FolderPath }}",
			Methods:    []string{ {{ range $i, $method := .Methods }}{{ if $i }}, {{ end }}"{{ $method }}"{{ end }} },
			Parameters: []string{ {{ range $i, $param := .Parameters }}{{ if $i }}, {{ end }}"{{ $param }}"{{ end }} },
		},
{{ end }}
	}
}

// GetRouteByPath returns route information for a specific API path
func GetRouteByPath(apiPath string) *RouteInfo {
	routes := GetAllRoutes()
	for _, route := range routes {
		if route.APIPath == apiPath {
			return &route
		}
	}
	return nil
}

// GetAllAPIPaths returns all registered API paths
func GetAllAPIPaths() []string {
	routes := GetAllRoutes()
	paths := make([]string, len(routes))
	for i, route := range routes {
		paths[i] = route.APIPath
	}
	return paths
}

// RouteInfo contains metadata about a route
type RouteInfo struct {
	APIPath    string
	FolderPath string
	Methods    []string
	Parameters []string
}