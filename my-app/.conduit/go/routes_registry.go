// Code generated by conduit at 2025-09-15 09:00:01. DO NOT EDIT.
// Auto-aggregates all generated route handlers

package generated

import (
	"net/http"

__conduit_health_route "my-app/.conduit/go/routes/__conduit/health"
api_v1_orgs_route "my-app/.conduit/go/routes/api/v1/orgs"
api_v1_profiles_route "my-app/.conduit/go/routes/api/v1/profiles"
api_v1_profiles_id__route "my-app/.conduit/go/routes/api/v1/profiles/id_"
api_v1_users_route "my-app/.conduit/go/routes/api/v1/users"
api_v1_users_id__route "my-app/.conduit/go/routes/api/v1/users/id_"

)

func GetConfiguredRouter() *http.ServeMux {
	mux := http.NewServeMux()
	RegisterRoutes(mux)
	return mux
}

func RegisterRoutes(mux *http.ServeMux) {
__conduit_health_route.SetupRoutes(mux, "/__conduit/health")
api_v1_orgs_route.SetupRoutes(mux, "/api/v1/orgs")
api_v1_profiles_route.SetupRoutes(mux, "/api/v1/profiles")
api_v1_profiles_id__route.SetupRoutes(mux, "/api/v1/profiles/:id")
api_v1_users_route.SetupRoutes(mux, "/api/v1/users")
api_v1_users_id__route.SetupRoutes(mux, "/api/v1/users/:id")

}

func GetAllRoutes() []RouteInfo {
	return []RouteInfo{
{
			APIPath:    "__conduit/health",
			FolderPath: "__conduit/health",
			Methods:    []string{ "GET" },
			Parameters: []string{  },
		},
{
			APIPath:    "api/v1/orgs",
			FolderPath: "api/v1/orgs",
			Methods:    []string{ "GET" },
			Parameters: []string{  },
		},
{
			APIPath:    "api/v1/profiles",
			FolderPath: "api/v1/profiles",
			Methods:    []string{ "GET" },
			Parameters: []string{  },
		},
{
			APIPath:    "api/v1/profiles/:id",
			FolderPath: "api/v1/profiles/id_",
			Methods:    []string{ "GET", "DELETE" },
			Parameters: []string{ "id" },
		},
{
			APIPath:    "api/v1/users",
			FolderPath: "api/v1/users",
			Methods:    []string{ "GET" },
			Parameters: []string{  },
		},
{
			APIPath:    "api/v1/users/:id",
			FolderPath: "api/v1/users/id_",
			Methods:    []string{ "GET", "DELETE" },
			Parameters: []string{ "id" },
		},

	}
}

func GetRouteByPath(apiPath string) *RouteInfo {
	routes := GetAllRoutes()
	for _, route := range routes {
		if route.APIPath == apiPath {
			return &route
		}
	}
	return nil
}

func GetAllAPIPaths() []string {
	routes := GetAllRoutes()
	paths := make([]string, len(routes))
	for i, route := range routes {
		paths[i] = route.APIPath
	}
	return paths
}

type RouteInfo struct {
	APIPath    string
	FolderPath string
	Methods    []string
	Parameters []string
}