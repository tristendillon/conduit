// Code generated by conduit at 2025-09-15 08:35:18. DO NOT EDIT.
// Source: api/v1/users/id_

package id__gen

import (
	"net/http"

	"encoding/json"

	"my-app/.conduit/go/dependencies/api/v1/users/user_repo"
)

// GET - Generated from original source
func GET(w http.ResponseWriter, r *http.Request) {
	id := r.URL.Query().Get("id")
	user := user_repo.FindUser(id)
	if user == nil {
		http.Error(w, "The user you are looking for does not exist", http.StatusNotFound)
		return
	}
	data, err := json.Marshal(user)
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Write(data)
}

// DELETE - Generated from original source
func DELETE(w http.ResponseWriter, r *http.Request) {
	id := r.URL.Query().Get("id")
	user := user_repo.DeleteUser(id)
	if user == -1 {
		http.Error(w, "User not found", http.StatusNotFound)
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("Successfully deleted user"))
}

// SetupRoutes registers all handlers for this route with the provided mux
func SetupRoutes(mux *http.ServeMux, basePath string) {

	mux.HandleFunc("GET "+basePath, GET)

	mux.HandleFunc("DELETE "+basePath, DELETE)

}

// GetRouteMethods returns all HTTP methods supported by this route
func GetRouteMethods() []string {
	return []string{"GET", "DELETE"}
}

// GetRouteInfo returns metadata about this route
func GetRouteInfo() RouteInfo {
	return RouteInfo{
		APIPath:    "api/v1/users/:id",
		FolderPath: "api/v1/users/id_",
		Methods:    GetRouteMethods(),
		Parameters: []string{"id"},
	}
}

type RouteInfo struct {
	APIPath    string
	FolderPath string
	Methods    []string
	Parameters []string
}
